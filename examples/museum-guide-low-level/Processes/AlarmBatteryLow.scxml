<scxml 
  version="1.0"
  xmlns="http://www.w3.org/2005/07/scxml"
  datamodel="ecmascript"
  name="AlarmBatteryLow"
  initial="idle">

  <datamodel>
    <!-- TYPE AlarmBatteryLow_tick_origin:URI -->
    <data name="AlarmBatteryLow_tick_origin"/>
    <!-- TYPE AlarmBatteryLow_halt_origin:URI -->
    <data name="AlarmBatteryLow_halt_origin"/>
    <!-- TYPE AlarmBatteryLow_sendAlarm_origin:URI -->
    <data name="AlarmBatteryLow_sendAlarm_origin"/>
  </datamodel>

  <state id="idle">
    <!-- If ticked, send a query to the AlarmCmp component -->
    <transition event="AlarmBatteryLow_tick_call" target="sendAlarm">
      <assign location="AlarmBatteryLow_tick_origin" expr="_event.origin" />
    </transition>
    <!-- If halted, do nothing-->
    <transition event="AlarmBatteryLow_halt_call" target="idle">
      <assign location="AlarmBatteryLow_halt_origin" expr="_event.origin" />
      <send event="AlarmBatteryLow_halt_return" targetexpr="AlarmBatteryLow_halt_origin" />
    </transition>
  </state>

	<state id="sendAlarm">
    <onentry>
      <send event="AlarmCmp_sendAlarm_call" target="AlarmCmp" />
    </onentry>
    <!-- External events received before 'sendAlarmReturn' are discarded -->
    <!-- but in this case we know that no event will be received -->
    <!-- because the tick of the BT is synchronous -->
    <transition event="AlarmCmp_sendAlarm_return" target="idle">
      <send event="AlarmBatteryLow_tick_return" targetexpr="AlarmBatteryLow_tick_origin">
        <!-- TYPE result:TickResponse -->
        <param name="result" expr="SUCCESS" />
      </send>
    </transition>
  </state>
</scxml>
