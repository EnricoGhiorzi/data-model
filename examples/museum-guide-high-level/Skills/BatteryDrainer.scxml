<scxml
    version="1.0"
    xmlns="..."
    datamodel="ecmascript"
    name="BatteryDrainer"
    initial="idle"> 

    <!-- BatteryDrainer is a server for tick and halt from the BT -->
    <ros_sync_service_server id="/BatteryDrainer/tick" />
    <ros_sync_service_server id="/BatteryDrainer/halt" />
    <!-- BatteryDrainer is a client for drain from the BatteryDriverCmp component-->
    <ros_async_service_client id="/BatteryDriverCmp/drain" />
    
    <state id="idle">
        <!-- If ticked, send a query to the BatteryDriverCmp -->
        <ros_sync_service_handle_request id="/BatteryDrainer/tick" target="drainQuery"/>
        <!-- If halted, do nothing-->
        <ros_sync_service_handle_request id="/BatteryDrainer/halt" target="idle">
            <ros_sync_service_send_response id="/BatteryDrainer/halt"/>
        </ros_sync_service_handle_request>
    </state>

    <state id="drainQuery">
        <!-- Send an asynchronous request and answer RUNNING to the BT -->
        <onentry>
            <ros_async_service_send_request id="/BatteryDriverCmp/drain"/>
            <ros_sync_service_send_response id="/BatteryDrainer/tick">
                <param name="result" expr="RUNNING"/>
            </ros_sync_service_send_response>
        </onentry>
        <!-- Remain in this state -->
        <transition target="running"/>
    </state>

    <state id="running">
        <!-- If the drain request returns, go to answer state-->
        <ros_async_service_handle_response id="/BatteryDriverCmp/drain" target="answer"/>
        <!-- If ticked, just answer RUNNING and stay in this state --> 
        <ros_sync_service_handle_request id="/BatteryDrainer/tick" target="running">
            <ros_sync_service_send_response id="/BatteryDrainer/tick">
                <param name="result" expr="RUNNING">
            </ros_sync_service_send_response>
        </ros_sync_service_handle_request>
        <!-- If halted, go to waitHalt state -->
        <ros_sync_service_handle_request id="/BatteryDrainer/halt" target="waitHalt"/>
    </state>

    <state id="answer">
        <!-- If halted, return to the idle state -->
        <ros_sync_service_handle_request id="/BatteryDrainer/halt" target="idle">
            <ros_sync_service_send_response id="/BatteryDrainer/halt"/>
        </ros_sync_service_handle_request>
        <!-- If ticked, send back an answer to the BT and go to idle state -->
        <ros_sync_service_handle_request id="/BatteryDrainer/tick" target="idle">
            <ros_sync_service_send_response id="/BatteryDrainer/tick">
                <param name="result" expr="SUCCESS">
            </ros_sync_service_send_response>
        </ros_sync_service_handle_request>
    </state>

    <state id="waitHalt">
        <!-- Wait for the response from the component, then go to idle state -->
        <ros_async_service_handle_response id="/BatteryDriverCmp/drain" target="idle">
            <ros_sync_service_send_response id="BatteryDrainer/halt">
        </ros_async_service_handle_response> 
    </state>
</scxml>
